<nav class="navBar">
  <div class="info">
    <h1>Rakesh Patel</h1>
    <p>UI Developer</p>
  </div>
  <ul>
    {% for nav in navigation %}
    <li>
      <a
        data-link-to={{nav.href}}
        href="{{ nav.href }}"
      >
        {{ nav.title | upper }}
      </a>
    </li>
    {% endfor %}
  </ul>
</nav>
<script>

  window.addEventListener('DOMContentLoaded', () => {
    const navBar = document.querySelector('.navBar');
    const navBarTop = navBar.offsetTop - 100;

    const personalPhoto = document.querySelector('.personal-photo');
    const personalPhotoTop = personalPhoto.offsetTop;

    const skills = document.querySelector('.tech-skills');

    window.addEventListener("scroll", () => {
      //console.log(navBar);
      if (navBarTop < window.scrollY) {
        navBar.classList.add('fixed');
        navBar.classList.add('expand')
      } else {
        navBar.classList.remove('fixed');
        navBar.classList.remove('expand')
      }

      if (personalPhotoTop < window.scrollY) {
        skills.classList.add('animate')
      }
    })
  })
</script>
<script>

  class NavBar {
    constructor() {
      this.navLi = document.querySelectorAll('.navBar ul li');
      this.navLinks = document.querySelectorAll('a[href^="#"]')
      this.addClickEvent();
      this.handleUnderLineEffect();
    }

    handleUnderLineEffect() {
      //get top positions for each link
      //add scroll event
      window.addEventListener("scroll", () => {
        this.offsetTopVals.forEach((topHeight) => {
          console.table({ topHeight })
          console.log(window.pageYOffset);
          const topOfDiv = topHeight.offsetTop;
          const bottomOfDiv = topHeight.offsetTop + topHeight.height;

          if (topOfDiv < window.pageYOffset && window.pageYOffset < bottomOfDiv) {
            this.removeLinkUnderline();
            console.log(window.pageYOffset);
            const linkToHighlight = document.querySelector(`a[href='${topHeight.linkTo}']`)
            linkToHighlight.parentNode.classList.add('selected');
          }

        })
      })
    }

    get offsetTopVals() {
      const topHeights = [];
      this.navLinks.forEach(link => {
        const linkTo = link.dataset.linkTo.slice(1, link.dataset.linkTo.length)
        const elemToScrollTo = document.getElementById(linkTo);
        const offsetTop = elemToScrollTo.offsetTop - 300;
        const height = elemToScrollTo.offsetHeight - 300;
        topHeights.push({ linkTo: link.dataset.linkTo, offsetTop, height });
      })
      console.table(topHeights)
      return topHeights
    }

    addClickEvent() {
      this.navLinks.forEach(link => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          this.removeLinkUnderline();
          this.addLinkUnderline(link);
          this.scrollIntoView(link);
        })
      })
    }

    removeLinkUnderline() {
      this.navLi.forEach(item => {
        if (item.className.includes('selected')) {
          item.classList.remove('selected');
        }
      })
    }

    addLinkUnderline(link) {
      link.parentNode.classList.add('selected');
    }

    scrollIntoView(link) {
      document.querySelector(link.getAttribute('href')).scrollIntoView({
        behavior: 'smooth',
      });
    }
  }

  window.addEventListener("DOMContentLoaded", () => {
    new NavBar();
  })
</script>
<!-- <script>
  //using waypoint
  window.addEventListener("DOMContentLoaded", () => {
    new NavBar()
    const navBarLinks = [...document.querySelectorAll('.navBar ul li a')]

    document.querySelectorAll('.animate').forEach(item => {
      new Waypoint({
        element: item,
        handler: function (direction) {
          console.log('scrolled into view')
          removeUnderline(navBarLinks);
          addUnderlineEffect(navBarLinks, item);
        },
        offset: 100
      })
    })

  })

  function removeUnderline(navBarLinks) {
    navBarLinks.forEach((link) => {
      if (link.parentNode.className.includes('selected')) {
        return link.parentNode.classList.remove('selected')
      }
    })
  };

  function addUnderlineEffect(navBarLinks, item) {
    const linkToUnderline = navBarLinks.find(link => link.dataset.linkTo === `#${item.id}`)
    if (linkToUnderline) {
      linkToUnderline.parentNode.classList.add('selected');
    }
  }

</script> -->
